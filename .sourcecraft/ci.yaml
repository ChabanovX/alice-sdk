on:
  pull_request: 
    - workflows: [backend-tests]
      filter:
        target_branches: "main"
        paths: "backend/**"
    # - workflows: [flutter-tests]
    #   filter:
    #     paths: "mobile/**"
    #     target_branches: "main"

workflows:
  backend-tests:
    settings:
      max_cube_duration: 20m
    tasks:
      - name: backend-tests-task
        cubes:
          - name: build-and-test
            image: ghcr.io/userver-framework/ubuntu-22.04-userver:latest
            script:
              - |
                apt update && apt install -y clang-tidy gcovr
                groupadd -g 1000 myuser && useradd -u 1000 -g 1000 -m myuser && chown 1000:1000 ./**
                cd backend
                sed -i 's/^CMAKE_OPTS ?=\(.*\)/CMAKE_OPTS ?=\1 -DCMAKE_CXX_FLAGS="--coverage"/' ./Makefile
                sed -i 's/^CMAKE_OPTS ?=\(.*\)/CMAKE_OPTS ?=\1 -DCMAKE_EXPORT_COMPILE_COMMANDS=ON/' ./Makefile
                echo "---------------START TESTS-----------------"
                sudo -u myuser make test-release
                mkdir coverage && cd coverage
                echo "---------------START COVERAGE-----------------"
                gcovr -r .. --html-details --filter ".*/src/.*" -o coverage.html
                cd .. && tar -czvf coverage.tar.gz coverage
                cp build-release/compile_commands.json .
                sed -i 's/-static-libasan//g' compile_commands.json
                echo "---------------START CLANG-TIDY-----------------"
                clang-tidy src/*.cpp -checks=google-*,clang-analyzer-*
            artifacts:
              paths:
                - ./backend/coverage.tar.gz
  
  flutter-tests:
    settings:
      max_cube_duration: 20m
    tasks:
      - name: flutter-tests-task
        cubes:
          - name: install-and-test
            image: ghcr.io/cirruslabs/flutter:3.32.7
            script:
              - |
                cd mobile
                flutter pub get
                flutter test --coverage
                flutter analyze
                genhtml coverage/lcov.info -o coverage/html
                tar -czvf coverage.tar.gz coverage
            artifacts:
              paths:
                - ./mobile/coverage.tar.gz
  build-all:
    settings:
      max_cube_duration: 20m
    tasks:
      - name: build-and-load-YCR-backend
        env:
          YC_DOCKER_REGISTRY_URI: cr.yandex/crpkn074ct7t36pe5t60
          IMAGE_NAME: backend-image
          YC_SERVICE_ACCOUNT_ID: aje0nk8qumod351tq14j
          YC_AUTHORIZED_KEY_JSON: ${{ secrets.key_json }}
          YC_FOLDER_ID: b1g5v665mv41es8qv40o
        cubes:
          - name: install-yc
            script:
              - curl -o ./yc-install.sh -L https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
              - echo 'source /root/yandex-cloud/completion.zsh.inc' >>  ~/.zshrc
              - chmod +x ./yc-install.sh && ./yc-install.sh -i /tmp/yc -n && mv /tmp/yc/bin/yc /usr/bin/yc
              - echo "$YC_AUTHORIZED_KEY_JSON" > key.json
              - yc config profile create sa-profile
              - yc config set service-account-key key.json
              - yc config set format json
              - yc config set folder-id $YC_FOLDER_ID
          - name: docker-login
            script:
              - yc container registry configure-docker --profile sa-profile

          - name: docker-build-push
            script:
              - export TIMESTAMP=$(date +%s)
              - docker build -f infra/Dockerfiles/Dockerfile.backend --tag $YC_DOCKER_REGISTRY_URI/$IMAGE_NAME:$TIMESTAMP --platform linux/amd64 .
              - docker push $YC_DOCKER_REGISTRY_URI/$IMAGE_NAME:$TIMESTAMP

          - name: docker-logout
            script:
              - docker logout $YC_DOCKER_REGISTRY_URI

      # - name: build-and-load-YCR-analytics
      #   env:
      #     YC_DOCKER_REGISTRY_URI: cr.yandex/crpkn074ct7t36pe5t60
      #     IMAGE_NAME: analytics-image
      #     YC_SERVICE_ACCOUNT_ID: aje0nk8qumod351tq14j
      #     YC_AUTHORIZED_KEY_JSON: ${{ secrets.key_json }}
      #     YC_FOLDER_ID: b1g5v665mv41es8qv40o
      #   cubes:
      #     - name: install-yc
      #       script:
      #         - curl -o ./yc-install.sh -L https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
      #         - echo 'source /root/yandex-cloud/completion.zsh.inc' >>  ~/.zshrc
      #         - chmod +x ./yc-install.sh && ./yc-install.sh -i /tmp/yc -n && mv /tmp/yc/bin/yc /usr/bin/yc
      #         - echo "$YC_AUTHORIZED_KEY_JSON" > key.json
      #         - yc config profile create sa-profile
      #         - yc config set service-account-key key.json
      #         - yc config set format json
      #         - yc config set folder-id $YC_FOLDER_ID
      #     - name: docker-login
      #       script:
      #         - yc container registry configure-docker --profile sa-profile

      #     - name: docker-build-push
      #       script:
      #         - export TIMESTAMP=$(date +%s)
      #         - docker build -f infra/Dockerfiles/Dockerfile.analytics --tag $YC_DOCKER_REGISTRY_URI/$IMAGE_NAME:$TIMESTAMP --platform linux/amd64 .
      #         - docker push $YC_DOCKER_REGISTRY_URI/$IMAGE_NAME:$TIMESTAMP

      #     - name: docker-logout
      #       script:
      #         - docker logout $YC_DOCKER_REGISTRY_URI

      # - name: build-mobile-android
      #   cubes:
      #     - name: build
      #       image: ghcr.io/cirruslabs/flutter:3.32.7
      #       script:
      #         - |
      #           cd mobile
      #           flutter pub get
      #           flutter build apk --release --verbose
      #       artifacts:
      #         paths:
      #           - ./mobile/build/app/outputs/flutter-apk/app-release.apk
